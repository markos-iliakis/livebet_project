{"filter":false,"title":"users.cpp","tooltip":"/users.cpp","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":1166,"column":1},"action":"remove","lines":["//#include \"stdafx.h\"","#include \"users.h\"","#include <string>","#include <iostream>","#include <fstream>","#include <sstream>","#include <cstdlib>","#include <iomanip>","#include <cstdio>","","using namespace std;","","bool is_digit(string s) {","","    for (size_t n = 0; n < s.length(); n++) {","        if (!isdigit(s[n])) {","            return false;","            break;","        }","    }","    return true;","}","","string to_Str(double a) {","","\tstringstream ss;","","\tss << a;","","\treturn ss.str();","}","","","User::User(string username, string realname, string password, int id) :","\t\tusername(username), realname(realname), password(password), id(id) {","}","User::User(string username, string password) :","\t\tusername(username), realname(\"\"), password(password), id(0){}","","void User::showOperations(string level){","\tcout << \"Choose:\" << endl <<","\t\"The ID of the node you wish to enter\" << endl <<","\t\"H(Home),  to return to the main menu\" << endl <<","\t\"T(Toggle), to change Prices\" << endl <<","\t\"X(Exit), exiting from system \"<< endl;","}","","","void User::getOperation(User *user, string operation, string& level, string price){}","void User::makeOperation(Player *player, string operation, string& level){}","void User::makeOperation(Guest *guest, string operation, string& level){}","void User::makeOperation(Booker *booker, string operation, string& level, string price){}","void User::makeOperation(Director *director, string operation, string& level){}","","int User::recogniseUser(User *){return 0;}","bool User::recogniseDirector(User *){return true;}","int User::identity_of_user(Guest *){return 0;}","int User::identity_of_user(Player *){return 0;}","int User::identity_of_user(Booker *){return 0;}","int User::identity_of_user(Director *){return 0;}","bool User::identity_of_director(Guest *){return true;}","bool User::identity_of_director(Player *){return true;}","bool User::identity_of_director(Booker *){return true;}","bool User::identity_of_director(Director *){return true;}","","string User::getUsername(){ return username;}","","string User::getRealname(){ return realname;}","","string User::getPassword(){ return password;}","","void User::setUsername(string newusername){ username = newusername; }","","void User::setPassword(string newpassword){ password = newpassword; }","","int User::getId(){ return id; }","","User::~User(){}","","Guest::Guest(string username, string password) : User(username, password){","}","","void Guest::getOperation(User *user, string operation, string& level, string price){","\tuser->makeOperation(this, operation, level);","}","","void Guest::makeOperation(Guest *guest, string operation, string& level){","}","","bool Guest::recogniseDirector(User * user){ return user->identity_of_director(this); }","","bool Guest::identity_of_director(Guest *){ return false; }","","int Guest::recogniseUser(User * user){ return user->identity_of_user(this); }","","int Guest::identity_of_user(Guest *guest){ return 0;}","","","Wallet::Wallet(float remain) : remain(remain){","","}","","Wallet::Wallet(float remain, string allfreebets) : remain(remain){","\tstring cell1, cell2;","\tistringstream bets(allfreebets);","\tint number_of_freebets = 0;","\tgetline(bets, cell1, ',');","\twhile(cell1 != cell2){","        number_of_freebets++;","        cell2 = cell1;\t\t\t\t//count number of freebets","        getline(bets, cell1, ',');","\t}","\t","\tistringstream bets2(allfreebets);","\tfor (int i = 0; i < number_of_freebets; i++)","\t{","\t\tgetline(bets2, cell1, ',');","\t\tfreebets.push_back(atof(cell1.c_str()));","\t\t//cout << freebets[i] << endl;","\t}","}","","float Wallet::getRemain(){ return remain;}","","vector<float> Wallet::getFreebets(){","\tvector<float> copy;","\tfor (vector<float>::iterator it = freebets.begin() ; it != freebets.end(); ++it){","\t\tcopy.push_back(*it);","\t}","\treturn copy;","}","","void Wallet::increament(float freshmoney){","\tremain += freshmoney;","}","","int Wallet::getSize(){ return freebets.size(); }","","void Wallet::showfreebets(){","\tchar index = 'a';","\tfor (vector<float>::iterator i = freebets.begin(); i != freebets.end(); ++i){","\t\tcout << index << \".  \" << *i << endl;","\t\tindex++;","\t}","}","","void Wallet::decreament(float bet){","\tremain -= bet;","}","","void Wallet::eraseFreebet(int position){","\tfreebets[position] = 0;","}","","float Wallet::getFreebet(int position){ return freebets[position]; }","","Wallet::~Wallet(){}","","Guest::~Guest() {","\t// TODO Auto-generated destructor stub","}","","void Guest::showOperations(string level){","\tthis->User::showOperations(level);","}","","Player::Player(string status, string username, string realname, string password, int id, float remain, string freebets) : User(username, realname, password, id), wallet(remain, freebets), status(status){","}","","Player::Player(string status, string username, string realname, string password, int id, float remain) : User(username, realname, password, id), wallet(remain), status(status){","\tcout << \"I constructed a player without freebets\";","}","","void Player::showOperations(string level){","\tthis->User::showOperations(level);","\tistringstream tmp(level);","    string temp1;","    int counter = 0;","","    while (getline(tmp, temp1, '.'))            //example of s: .1.1.2","        counter++;","\tcout << \"A(Account), to manage your account\" << endl;","\tif(counter == 5)","\t\tcout << \"P(Place), to place a bet\" << endl;","}","","void Player::getOperation(User *user, string operation, string& level, string price){","\tuser->makeOperation(this, operation, level);","}","","void Player::makeOperation(Player *player, string operation, string& level){","\tif(operation == \"A\" || operation == \"Account\"){","\t\tthis->enterAccount();","\t}","\telse if(operation == \"P\" || operation == \"Place\"){","\t\tthis->placeBet(level);","\t}","}","","int Player::recogniseUser(User *user){return user->identity_of_user(this); }","","bool Player::recogniseDirector(User * user){ return user->identity_of_director(this); }","","bool Player::identity_of_director(Player *){ return false; }","","int Player::identity_of_user(Player *player){ return 1; }","","Wallet& Player::getWallet(){","\treturn wallet;","}","","void Player::enterAccount(){","\tif (system(\"CLS\")) system(\"clear\");","\tcout << \"Player: \" << this->getRealname() << \" and username: \" << this->getUsername() << endl;","\tWallet w = this->getWallet();","\tcout << \"Available remain: \" << w.getRemain() << endl;","\tcout << \"Coupons' List: \";","\tvector<float> myvector = w.getFreebets();","\tfor (vector<float>::iterator it = myvector.begin() ; it != myvector.end(); ++it)","\t\tcout << *it << \" \";","\tcout << endl << endl;","\t","\tstring operation;","\tbool flag = true;","\twhile(flag == true){","\t\tcout << \"Choices: \" << endl <<","\t\t\"R(Rename), to change name\" << endl <<","\t\t\"P(Password), to change your password\" << endl <<","\t\t\"B(Bets), to show history of bets\" << endl <<","\t\t\"D(Deposit), to refill your account and increase the remain\" << endl;","\t\tgetline(cin, operation);","\t\tif(operation == \"R\" || operation == \"Rename\"){","\t\t\tflag = false;","\t\t\tthis->renamePlayer();","\t\t}","\t\telse if(operation == \"P\" || operation == \"Password\"){","\t\t\tflag = false;","\t\t\tthis->changePassword();","\t\t}","\t\telse if(operation == \"B\" || operation == \"Bets\"){","\t\t\tthis->betsHistory();","\t\t\tflag = false;","\t\t}","\t\telse if(operation == \"D\" || operation == \"Deposit\"){","\t\t\tthis->refillAccount();","\t\t\tflag = false;","\t\t}","\t\telse","\t\t\tcout << \"Wrong code of operation, Please try again\" << endl;","\t}","","","}","","void Player::renamePlayer(){","\tbool  flag = true, found = true;","\tstring name, line, cell;","\tifstream database(\"users.csv\");","\tofstream newdatabase(\"new.csv\");","\tgetline(database, line);","\twhile(flag == true){","\t\tfound = true;","\t\tcout << \"Please Give the new Name\" << endl;","\t\tcin >> name;","\t\tif(name == \"guest\"){","\t\t\tcout << \"Not valid name please try again\" << endl;","\t\t\tfound = false;","\t    }","\t\twhile(true){","\t\t\tgetline(database, line);","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell, '|');","\t        getline(is, cell, '|');","\t        if(name == cell){","\t        \tcout << \"The name you entered already exists. Please try again\" << endl;","\t        \tfound = false;","\t        }","\t        if ( database.eof())","\t        \tbreak;","\t        ","\t\t}","\t\tif(found == true)","\t\t\tflag = false;\t","\t\t","\t}","\tint size = wallet.getSize();","\tif(found == true){\t\t//the name is valid make the change at the users.csv","\t\tifstream database(\"users.csv\");","\t\tgetline(database, line);","\t\tnewdatabase << line << endl;","\t\twhile(true){","\t\t\tgetline(database, line);","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell, '|');","\t\t\tif(this->getId() == atoi(cell.c_str())){","\t\t\t\tnewdatabase << cell << '|' << name << '|';","\t\t\t\tgetline(is, cell, '|');","\t\t\t\tfor (int i = 0; i < 4; ++i){","\t\t\t\t\tgetline(is, cell, '|');","\t\t\t\t\tnewdatabase << cell << '|';","\t\t\t\t}","\t\t\t\tgetline(is, cell, '|');","\t\t\t\tnewdatabase << cell;","\t\t\t\tif(size != 0){","\t\t\t\t\tnewdatabase << '|';","\t\t\t\t\tgetline(is, cell, '|');","\t\t\t\t\tnewdatabase << cell;","\t\t\t\t}","\t\t\t\t","\t\t\t\t","\t\t\t\tnewdatabase << endl;","\t\t\t}","\t\t\telse","\t\t\t\tnewdatabase << line << endl;","\t\t\tif ( database.eof() ) break;","\t\t}","\t}","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Rename \" << \"changed to \" << name << endl;","","","\tdatabase.close();","\tnewdatabase.close();","\tremove(\"users.csv\");","\trename(\"new.csv\", \"users.csv\");","\tthis->setUsername(name);","","\t ","}","","void Player::changePassword(){","\tstring password1, password2, cell, line;","\tint id;","\tifstream database(\"users.csv\");","\tofstream newdatabase(\"new.csv\");","\tdo{","\t\tcout << \"Please enter the new password\" << endl;","\tcin >> password1;","\tcout << \"Please re-enter the password\" << endl;","\tcin >> password2;","\tif(password1 != password2)","\t\tcout << \"The 2 password you entered don't match, please try again\" << endl;","\t}while(password1 != password2);","\tid = this->getId();","\tgetline(database, line);","\tnewdatabase << line << endl;","\tint size = wallet.getSize();","\twhile(true){","\t\tgetline(database, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tif(id == atoi(cell.c_str())){","\t\t\t\tnewdatabase << cell << '|';","\t\t\t\tfor (int i = 0; i < 2; ++i){","\t\t\t\t\tgetline(is, cell, '|');","\t\t\t\t\tnewdatabase << cell << '|';","\t\t\t\t}","\t\t\t\tnewdatabase << password1 << '|';","\t\t\t\tgetline(is, cell, '|');","\t\t\t\tfor (int i = 0; i < 3; ++i){","\t\t\t\t\tgetline(is, cell, '|');","\t\t\t\t\tif(i == 2)","\t\t\t\t\t\tnewdatabase << cell;","\t\t\t\t\telse","\t\t\t\t\t\tnewdatabase << cell << '|';","\t\t\t\t}","\t\t\t\tif(size != 0){","\t\t\t\t\tgetline(is, cell, '|');","\t\t\t\t\tnewdatabase << '|' << cell;","\t\t\t\t}","\t\t\t\t","\t\t\t\t","\t\t\t\tnewdatabase << endl;","","\t\t}","\t\telse","\t\t\tnewdatabase << line << endl;","\t\tif ( database.eof() ) break;","\t}","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Password \" << \"changed to \" << password1 << endl;","\tdatabase.close();","\tnewdatabase.close();","\tremove(\"users.csv\");","\trename(\"new.csv\", \"users.csv\");","\tthis->setPassword(password1);","}","","void Player::betsHistory(){","\tstring cell, line;","\tifstream database(\"bets.csv\");","\tgetline(database, line);","\twhile(true){","\t\tgetline(database, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tgetline(is, cell, '|');","\t\tif(this->getId() == atoi(cell.c_str())){","\t\t\tistringstream newline(line);","\t\t\tstring bet;","\t\t\tfor(int j = 0; j < 5; j++){","\t\t    \tgetline(newline, bet, '|');","\t\t    \tcout << setw (10) << bet << \" | \";","\t\t    }","\t\t    cout << endl;","\t\t}","","\t\tif ( database.eof() ) break;","\t}","\tstring pause;","\tgetline(cin, pause);","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Bets \" << \"Player viewed his bets\" << endl;","}","","void Player::refillAccount(){","\tstring money;","\tcout << \"Please enter the amount of money you wish to store to your account\" << endl;","\tgetline(cin, money);","\twallet.increament(atof(money.c_str()));","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Deposit \" << \"Player refilled his wallet with \" << money << endl;","}","","void Player::placeBet(string currentlevel){\t\t\t\t//prepei edw na grafeis meta sto istoriko kai sto bets.csv","\tstring eventchoice, bet, line, cell;","\tifstream database(\"bets.csv\");","\twhile(true){","\t\tgetline(database, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tif ( database.eof() ) break;","\t}","\t","\t","\tbool type_of_bet; //true for money false for freebet;","\tbool succes_bet = false;","\tchar index;","\tcout << \"Available remain in account: \" << wallet.getRemain() << endl;","\tif(eventchoice == \"cancel\")","\t\treturn;","\telse{","\t\twhile(succes_bet == false){","\t\t\tif(wallet.getSize() != 0){","\t\t\t\twallet.showfreebets();","\t\t\t\tcout << \"Please give the amount of money you want to bet or the number of freebet\" << endl;","\t\t\t}","\t\t\telse{","\t\t\t\tcout << \"No available freebets\" << endl;","\t\t\t\tcout << \"Please give the amount of money you want to bet\" << endl;","\t\t\t}","\t\t\tcin >> bet;","\t\t\ttype_of_bet = is_digit(bet);","\t\t\tif(type_of_bet == true){","\t\t\t\tif(wallet.getRemain() == 0){","\t\t\t\t\tcout << \"No money in the wallet, please enter your account to refill\" << endl;","\t\t\t\t\treturn;","\t\t\t\t}","\t\t\t\telse if(atof(bet.c_str()) > wallet.getRemain()){","\t\t\t\t\tcout << \"Sorry, not enough money in the wallet, please try again\" << endl;","\t\t\t\t\treturn;","\t\t\t\t}","","\t\t\t\telse{","\t\t\t\t\twallet.decreament(atoi(bet.c_str()));","\t\t\t\t\tsucces_bet = true;","\t\t\t\t}","\t\t\t}","\t\t\telse{","\t\t\t\tcout << \"Please enter the letter of the freebet you want to use\" << endl;","\t\t\t\tcin >> index;","\t\t\t\twallet.eraseFreebet(index- 'a');","\t\t\t\tsucces_bet = true;","\t\t\t}","\t\t}","\t}","\tcurrentlevel +=  eventchoice;","\tcurrentlevel.erase(currentlevel.begin(), currentlevel.begin()+1);","\tofstream out;","\tout.open(\"bets.csv\", ios::app); //append mode","\tout << endl << atoi(cell.c_str() + 1) << '|' << this->getId() << '|' << currentlevel << '|';","\tif(type_of_bet == true)","\t\tout << bet << \"|-\";","\telse","\t\tout << wallet.getFreebet(index - 'a') << \"|-\";","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Place \";","\tif(type_of_bet)","\t\tlogfile << \"Player placed the amount of money \" << bet << endl;","\telse","\t\tlogfile << \"Player placed a freebet\" << endl;","","}","","Player::~Player() {","}","","Booker::Booker(string username, string realname, string password, int id) : User(username, realname, password, id){","}","","void Booker::showOperations(string level){","\tthis->User::showOperations(level);","\tcout << \"B(Bets) to show the last 20 bets\" << endl <<","\t\"F(Freebets), to give a freebet to a player\" << endl;","\tistringstream tmp(level);","    string temp1;","    int counter = 0;","","    while (getline(tmp, temp1, '.'))            //example of s: .1.1.2","        counter++;","    if(counter == 5)","\t\tcout << \"V(Void), to cancel a choice\" << endl <<","\t\t\"S(Settle), to define a choice winning or losing\" << endl;","","}","","void Booker::getOperation(User *user, string operation, string& level, string price){","\tuser->makeOperation(this, operation, level, price);","}","","void Booker::makeOperation(Booker *booker, string operation, string& level, string price){","\tif(operation == \"B\" || operation == \"Bets\")","\t\tthis->showBets();","\telse if(operation == \"F\" || operation == \"Freebets\"){","\t\tthis->giveFreebet();","\t}","\telse if(operation == \"V\" || operation == \"Void\"){","\t\tthis->cancelBet(level);","\t}","\telse if(operation == \"S\" || operation == \"Settle\"){","\t\tthis->settleBet(level, price);","\t}","}","","int Booker::recogniseUser(User *user){return user->identity_of_user(this); }","","bool Booker::recogniseDirector(User * user){ return user->identity_of_director(this); }","","bool Booker::identity_of_director(Booker *){ return false; }","","int Booker::identity_of_user(Booker *player){ return 2; }","","void Booker::showBets(){","\tif (system(\"CLS\")) system(\"clear\");","\tifstream database(\"bets.csv\");","\tstring line;","    string cell;","    int i = 0;","    while(true || i<20){","    \tgetline(database, line);","    \tistringstream is(line);","    \tfor(int j = 0; j < 5; j++){","\t    \tgetline(is, cell, '|');","\t    \tcout << setw (10) << cell << \" | \";","\t    }","    \tcout << endl;","    \tif ( database.eof() ) break;","    }","    getchar();","    getchar();","","    ofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << \"Booker \" << this->getUsername() << \" viewed the list of bets\" << endl;","}","","void Booker::giveFreebet(){","\tif (system(\"CLS\")) system(\"clear\");","\tstring username, freebet;","\tbool found = false;","\tifstream database(\"users.csv\");","\tofstream newdatabase(\"new.csv\");","\twhile(found == false){","\t\tcout << \"Please Give the name of the player you wish to give a freebet\" << endl;","\t\tcin >> username;","\t\t","\t\tstring line, cell, cell2;","\t\tgetline(database, line);","\t\tnewdatabase << line << endl;","\t\twhile(true){","\t\t\tgetline(database, line);","\t\t\tnewdatabase << line;","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell, '|');","\t        getline(is, cell, '|');","\t        if(username == cell){","\t        \tfound = true;","\t        \tcout << \"Please Give the amount of money you wish place:\" << endl;","\t        \tcin >> freebet;","\t        \tistringstream is2(line);","\t        \tfor (int i = 0; i < 6; ++i){","\t        \t\tgetline(is, cell, '|');","\t        \t\tgetline(is2, cell2, '|');","\t        \t}","\t        \tgetline(is2, cell2, '|');","\t        \tif(cell2 != cell)","\t        \t\tnewdatabase << ',' << freebet << endl;","\t        \telse ","\t        \t\tnewdatabase << '|' << freebet << endl;","\t        }","\t        else","\t        \tnewdatabase << endl;","\t        if ( database.eof() ) break;","\t\t}","\t}","\tdatabase.close();","\tnewdatabase.close();","\tremove(\"users.csv\");","\trename(\"new.csv\", \"users.csv\");","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << \"Booker \" << this->getUsername() << \" gave a freebet to \" << username << \" with amount \" << freebet << endl;","","}","","void Booker::cancelBet(string& level){","\tifstream database(\"bets.csv\");","\tifstream database3(\"bets.csv\");","\tofstream newdatabase(\"new.csv\");","\tofstream newdatabase2(\"new2.csv\");","\tfstream database2(\"users.csv\");","\tfstream betsdatabase(\"bets.csv\");","\tstring line, selection, cell, user_id, lvl, money;","\tstring line2, cell2, cell3;","\tbool flag = true;","\tcout << \"Which selection do you wish to cancel ?\" << endl;","\tcin >> selection;","\tlevel  += selection + \".\";","\tlvl = level;","\tlvl.erase(lvl.begin(), lvl.begin() + 1);","\tlvl.erase(lvl.end() - 1, lvl.end());","\tbool bet_found = false;","\twhile(!bet_found){","\t\tgetline(database3, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tgetline(is, cell, '|');","\t\tgetline(is, cell, '|');","\t\tif(lvl == cell){","\t\t\tbet_found = true;","\t\t}","\t\tif ( database3.eof() ) break;","\t}","\tif (bet_found){","\t\tgetline(betsdatabase, line);","\t\tnewdatabase2 << line << endl;","\t\twhile(true){","\t\t\tgetline(betsdatabase, line);","\t\t\tistringstream is3(line);","\t\t\tfor (int i = 0; i < 3; ++i)","\t\t\t\tgetline(is3, cell2, '|');","\t\t\tif(lvl == cell2){","\t\t\t\tistringstream is3(line);","\t\t\t\tfor (int i = 0; i < 4; ++i){","\t\t\t\t\tgetline(is3, cell2, '|');","\t\t\t\t\tnewdatabase2 << cell2 << '|';","\t\t\t\t}","\t\t\t\tnewdatabase2 << \"V\" << endl;","\t\t\t}","\t\t\telse","\t\t\t\tnewdatabase2 << line << endl;","\t\t\tif ( betsdatabase.eof() ) break;","\t\t}","\t\t","\t\tgetline(database, line);","\t\twhile(true){","\t\t\tgetline(database, line);","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell, '|');","\t\t\tgetline(is, cell, '|');","\t\t\tuser_id = cell;","\t\t\tgetline(is, cell, '|');","\t\t\tif(cell == lvl){","\t\t\t\tgetline(is, cell, '|');","\t\t\t\tmoney = cell;","\t\t\t\tgetline(database2, line2);","\t\t\t\tnewdatabase << line2 << endl;","\t\t\t\twhile(true){","\t\t\t\t\tgetline(database2, line2);","\t\t\t\t\tistringstream is2(line2);","\t\t\t\t\tgetline(is2, cell2, '|');","\t\t\t\t\tif(cell2 == user_id){","\t\t\t\t\t\tnewdatabase << user_id << '|';","\t\t\t\t\t\tfor(int i =0; i < 5; i++){","\t\t\t\t\t\t\tgetline(is2, cell2, '|');","\t\t\t\t\t\t\tnewdatabase << cell2 << '|';","\t\t\t\t\t\t}","\t\t\t\t\t\tgetline(is2, cell2, '|');","\t\t\t\t\t\tnewdatabase << atof(money.c_str()) + atof(cell2.c_str());","\t\t\t\t\t\tgetline(is2, cell3, '|') ;","\t\t\t\t\t\t","\t\t\t\t\t\tif(cell3 ==  \"\")","\t\t\t\t\t\t\tnewdatabase << endl; ","\t\t\t\t\t\telse","\t\t\t\t\t\t\tnewdatabase << '|' << cell3 << endl;","\t\t\t\t\t}","\t\t\t\t\telse","\t\t\t\t\t\tnewdatabase << line2 << endl;","\t\t\t\t\tif ( database2.eof() ) break;","\t\t\t\t}","\t\t\t}","\t\t\tif ( database.eof() ) break;","\t\t}","\t\tdatabase.close();","\t\tdatabase2.close();","\t\tdatabase3.close();","\t\tnewdatabase.close();","\t\tremove(\"users.csv\");","\t\trename(\"new.csv\", \"users.csv\");","\t\tbetsdatabase.close();","\t\tnewdatabase2.close();","\t\tremove(\"bets.csv\");","\t\trename(\"new2.csv\", \"bets.csv\");","\t}","","\t","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Void \" << \"Booker canceled the node \" << lvl << endl;","}","","void Booker::settleBet(string& level, string price){","\tfloat total_money=0;","\tstring sublevel, money;","\tstring lvl = level;","\tlvl.erase(lvl.begin(), lvl.begin() + 1);","\tlvl.erase(lvl.end() - 1, lvl.end());","\t//cout << \"level \" << lvl << \"price \" << price<< endl;","\tifstream database(\"bets.csv\");","\tofstream newdatabase(\"new.csv\");","\tstring cell, line, line2, cell2, cell3;","\tgetline(database, line);","\tbool bet_found = false;","\twhile(!bet_found){","\t\tgetline(database, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tgetline(is, cell, '|');","\t\tgetline(is, cell, '|');","\t\tif(lvl == cell){","\t\t\tbet_found = true;","\t\t}","\t\tif(bet_found == true){","\t\t\tsublevel = lvl;","\t\t\tsublevel.erase(sublevel.end() - 2, sublevel.end());","\t\t\tifstream database2(\"bets.csv\");","\t\t\tgetline(database2, line2);","\t\t\tnewdatabase << line2 << endl;","\t\t\twhile(true){","\t\t\t\tgetline(database2, line2);","\t\t\t\tistringstream is2(line2);","\t\t\t\tfor (int i = 0; i < 3; ++i)","\t\t\t\t\tgetline(is2, cell2, '|');","\t\t\t\tstring test_sublevel = cell2;","\t\t\t\tif(cell2 != \"\")","\t\t\t\t\ttest_sublevel.erase(test_sublevel.end() - 2, test_sublevel.end());","\t\t\t\tif(lvl == cell2){","\t\t\t\t\tistringstream is3(line2);","\t\t\t\t\tfor (int i = 0; i < 4; ++i){","\t\t\t\t\t\tgetline(is3, cell2, '|');","\t\t\t\t\t\tnewdatabase << cell2 << '|';","\t\t\t\t\t}","\t\t\t\t\tnewdatabase << \"W\" << endl;","\t\t\t\t}","\t\t\t\t","\t\t\t\telse if(test_sublevel == sublevel){","\t\t\t\t\tistringstream is3(line2);","\t\t\t\t\tfor (int i = 0; i < 4; ++i){","\t\t\t\t\t\tgetline(is3, cell2, '|');","\t\t\t\t\t\tnewdatabase << cell2 << '|';","\t\t\t\t\t}","\t\t\t\t\tgetline(is3, cell2, '|');","\t\t\t\t\tif(cell2 != \"V\")","\t\t\t\t\t\tnewdatabase << \"L\" << endl;","\t\t\t\t\telse","\t\t\t\t\t\tnewdatabase << cell2 << endl;","\t\t\t\t}","\t\t\t\telse","\t\t\t\t\tnewdatabase << line2 << endl;","\t\t\t\t","","\t\t\t\tif ( database2.eof() ) break;","\t\t\t}","\t\t}","\t\t","\t\tif ( database.eof() ) break;","\t}","\tdatabase.close();","\tnewdatabase.close();","\tremove(\"bets.csv\");","\trename(\"new.csv\", \"bets.csv\");","\tstring user_id, winner_id;","\tifstream usersdatabase(\"users.csv\");","\tifstream checkbets(\"bets.csv\");","\tofstream newdatabase2(\"new2.csv\");","\tgetline(usersdatabase, line2);","\tnewdatabase2 << line2 << endl;","\tgetline(checkbets, line);","\tbool flag = true;","\twhile(true){","\t\tgetline(checkbets, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tgetline(is, cell, '|');","\t\tuser_id = cell;","\t\tgetline(is, cell, '|');","\t\tif(lvl == cell){","\t\t\twinner_id = user_id;","\t\t\tgetline(is, cell, '|');","\t\t\tmoney = cell;","\t\t\ttotal_money += atof(money.c_str());","\t\t\tflag = true;","\t\t\twhile(flag){","\t\t\t\tgetline(usersdatabase, line2);","\t\t\t\tistringstream users(line2);","\t\t\t\tgetline(users, cell2, '|');","\t\t\t\tuser_id = cell2;","\t\t\t\tif(winner_id == cell2){","\t\t\t\t\tnewdatabase2 << cell2 << '|';","\t\t\t\t\tfor (int i = 0; i < 5; ++i){","\t\t\t\t\t \tgetline(users, cell2, '|');","\t\t\t\t\t \tnewdatabase2 << cell2 << '|';","\t\t\t\t\t}","\t\t\t\t\tgetline(users, cell2, '|');","\t\t\t\t\tnewdatabase2 << atof(cell2.c_str()) + atof(money.c_str()) *0.95;","\t\t\t\t\tgetline(users, cell3, '|');","\t\t\t\t\tif(cell3 == \"\")","\t\t\t\t\t\tnewdatabase2 << endl;","\t\t\t\t\telse{","\t\t\t\t\t\tnewdatabase2 << '|' << cell3 << endl;","\t\t\t\t\t}","\t\t\t\t\tflag = false;","\t\t\t\t}","\t\t\t\telse","\t\t\t\t\tnewdatabase2 << line2 << endl;","\t\t\t\tif ( usersdatabase.eof()) break;","\t\t\t}","\t\t}","\t\tif ( checkbets.eof() ) break;","\t}","\tprice = to_Str(total_money);","\tusersdatabase.close();","\tcheckbets.close();","\tnewdatabase2.close();","\tremove(\"users.csv\");","\trename(\"new2.csv\", \"user.csv\");","","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Settle \" << \"Booker settled the node:  \" << lvl << \" to winning \" << endl;","}","","Booker::~Booker() {","\t// TODO Auto-generated destructor stub","}","","Director::Director(string username, string realname, string password, int id) :  User(username, realname, password, id){","}","","void Director::showOperations(string level){","\tBooker b(\"\", \"\", \"\", 0);","\tb.showOperations(level);","\tcout << \"S(Save) to save current state and sync the data files\" << endl << endl <<","\t\"Management:\" << endl <<","\t\"L(Logs), to show the last 25 actions on the system\" << endl<<","\t\"U(Users), to manage the users\" << endl <<","\t\"V(Visibility), to change visibility of a node\" << endl <<","\t\"R(Rename), to change the name of a node\" << endl <<","\t\"N(New), to create a node\" << endl <<","\t\"C(Copy), to copy a node (as non-visible)\" << endl <<","\t\"D(Delete), to delete a node\" << endl;","}","","void Director::getOperation(User *user, string operation, string& level, string price){","\tuser->makeOperation(this, operation, level);","}","","void Director::makeOperation(Director *director, string operation, string& level){","\tif(operation == \"U\" || operation == \"Users\")","\t\tthis->manageUsers();","\telse if (operation == \"L\" || operation == \"Logs\")","\t\tshowLog();","\telse if (operation == \"B\" || operation == \"Bets\"){","\t\tshowBets();","\t}","\telse if (operation == \"F\" || operation == \"Freebets\"){","\t\tgiveFreebet();","\t}","}","","void Director::giveFreebet(){","\tif (system(\"CLS\")) system(\"clear\");","\tstring username, freebet;","\tbool found = false;","\tifstream database(\"users.csv\");","\tofstream newdatabase(\"new.csv\");","\twhile(found == false){","\t\tcout << \"Please Give the name of the player you wish to give a freebet\" << endl;","\t\tcin >> username;","\t\t","\t\tstring line, cell, cell2;","\t\tgetline(database, line);","\t\tnewdatabase << line << endl;","\t\twhile(true){","\t\t\tgetline(database, line);","\t\t\tnewdatabase << line;","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell, '|');","\t        getline(is, cell, '|');","\t        if(username == cell){","\t        \tfound = true;","\t        \tcout << \"Please Give the amount of money you wish place:\" << endl;","\t        \tcin >> freebet;","\t        \tistringstream is2(line);","\t        \tfor (int i = 0; i < 6; ++i){","\t        \t\tgetline(is, cell, '|');","\t        \t\tgetline(is2, cell2, '|');","\t        \t}","\t        \tgetline(is2, cell2, '|');","\t        \tif(cell2 != cell)","\t        \t\tnewdatabase << ',' << freebet << endl;","\t        \telse ","\t        \t\tnewdatabase << '|' << freebet << endl;","\t        }","\t        else","\t        \tnewdatabase << endl;","\t        if ( database.eof() ) break;","\t\t}","\t}","\tdatabase.close();","\tnewdatabase.close();","\tremove(\"users.csv\");","\trename(\"new.csv\", \"users.csv\");","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << \"Director \" << this->getUsername() << \" gave a freebet to \" << username << \" with amount \" << freebet << endl;","","}","","void Director::showBets(){","\tif (system(\"CLS\")) system(\"clear\");","\tifstream database(\"bets.csv\");","\tstring line;","    string cell;","    int i = 0;","    while(true || i<20){","    \tgetline(database, line);","    \tistringstream is(line);","    \tfor(int j = 0; j < 5; j++){","\t    \tgetline(is, cell, '|');","\t    \tcout << setw (10) << cell << \" | \";","\t    }","    \tcout << endl;","    \tif ( database.eof() ) break;","    }","    getchar();","    getchar();","","    ofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << \"Director \" << this->getUsername() << \" viewed the list of bets\" << endl;","}","","void Director::manageUsers() {","\tif (system(\"CLS\")) system(\"clear\");","\tstring choice;","\tcout << \"Choices:\" << endl << endl << \"V(View), to show the users\" << endl <<","\t\t\"S(Search), to search a user\" << endl <<","\t\t\"L(Lock), to change the status of a user\\n\" << endl;","\tcin >> choice;","\tif (choice == \"V\" || choice == \"View\")","\t\tthis->showUsers();","\telse if (choice == \"L\" || choice == \"Lock\")","\t\tthis->lockUser();","\telse if (choice == \"S\" || choice == \"Search\")","\t\tthis->searchUser();","}","","void Director::showUsers(){","","\tif (system(\"CLS\")) system(\"clear\");","\tifstream database(\"users.csv\");","\tstring line, cell;","\twhile (getline(database, line)) {","","\t\tcout << \"\\n| \" << line;","\t}","\tcout << endl;","\tstring pause;","\tgetchar();","\tgetchar();","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << \"Director \" << this->getUsername() << \" Viewed the users of the system\" << endl;","}","","void Director::lockUser() {","\tstring username, status;","\tint type;","\tif (system(\"CLS\")) system(\"clear\");","\tcout << \"Lock - Unlock User\" << endl;","\t","\tshowUsers();","","\tcout << \"Give the username you wish to Lock/Unlock : \";","\tcin >> username;","","\tif (system(\"CLS\")) system(\"clear\");","\ttype = searchUser(username);","\tif (type == 1) {\t//if it's a player","\t\t","\t\tstring status, comment;","","\t\tcout << \"Give the status (L for Locked or A for Available) : \";","\t\tcin >> status;","\t\tcout << \"\\nGive a comment : \";","\t\tgetchar();","\t\tgetline(cin, comment);","","\t\tstatus += \" \" + comment;","","\t\tifstream database(\"users.csv\");","\t\tofstream newdatabase(\"new.csv\");","","\t\tstring line, cell, cell2;","\t\tgetline(database, line);","\t\tnewdatabase << line << endl;","\t\twhile (true) {","","\t\t\tgetline(database, line);","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell2, '|');","\t\t\tgetline(is, cell, '|');","","\t\t\tif (username == cell) {","","\t\t\t\tnewdatabase << cell2 << '|';","\t\t\t\tnewdatabase << cell << '|';","","\t\t\t\tfor (int i = 0; i < 3; ++i) {","\t\t\t\t\tgetline(is, cell, '|');","\t\t\t\t\tnewdatabase << cell << '|';","\t\t\t\t}","","\t\t\t\tnewdatabase << status << '|';","\t\t\t\tgetline(is, cell, '|');","","\t\t\t\tgetline(is, cell, '\\n');","\t\t\t\tnewdatabase << cell;","","\t\t\t\tnewdatabase << endl;","\t\t\t}","\t\t\telse","\t\t\t\tnewdatabase << line << endl;","\t\t\tif (database.eof()) break;","\t\t}","\t\tdatabase.close();","\t\tnewdatabase.close();","\t\tremove(\"users.csv\");","\t\trename(\"new.csv\", \"users.csv\");","","\t\tcout << \"\\nDone !\";","\t}","\telse if (type != 0)","\t\tcout << \"\\nNot a Player !\" << endl;","\t","\tstring pause;","\tgetline(cin, pause);","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << \"Director \" << this->getUsername() << \" changed the status of \"<< username << \" to \" << status << endl;","}","","int Director::searchUser(string user) {","\tstring username;","\tint type = 0;","\tif (user == \"\") {","\t\tif (system(\"CLS\")) system(\"clear\");","\t\tcout << \"Search User\" << endl;","","\t\tcout << \"Give the username : \";\t\t","\t\tcin >> username;","\t}","\telse {","\t\tusername = user;","\t}","","\tif (system(\"CLS\")) system(\"clear\");","\tifstream database(\"users.csv\");","\tbool found = false;","\tstring line;","\tstring cell;","\tgetline(database, line);","\twhile (true) {","\t\tgetline(database, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tgetline(is, cell, '|');","","\t\tfor (int i = 0; i <= cell.size(); i++) {","\t\t\tif (!username.compare(cell.substr(i, username.size()))){","\t\t\t\tcout << line << endl;","\t\t\t\tfound = true;","\t\t\t\tgetline(is, cell, '|');","\t\t\t\tgetline(is, cell, '|');","\t\t\t\tgetline(is, cell, '|');","\t\t\t\ttype = atoi((cell.c_str()));","\t\t\t}","\t\t}","\t\tif (database.eof()) break;","\t}","","\tif (!found)","\t\tcout << \"Nothing Found !\" << endl;","","\tstring pause;","\tgetchar();","\tgetchar();","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << \"Director \" << this->getUsername() << \" searched the name \" << username << endl;","","\treturn type;","}","","int Director::recogniseUser(User *user) {return user->identity_of_user(this); }","","bool Director::recogniseDirector(User *user){ return user->identity_of_director(this); }","","bool Director::identity_of_director(Director *){ return true; }","","int Director::identity_of_user(Director *player){ return 3; }","","Director::~Director() {","\t// TODO Auto-generated destructor stub","}","","void Director::showLog() {","\tif (system(\"CLS\")) system(\"clear\");","\tifstream logs(\"audit.log\");","","\tstring line;","\tint i=0;","\twhile (i<25 && (!logs.eof())){","\t\tgetline(logs, line);","\t\tcout << line << endl;","\t\ti++;","\t}","\tgetchar();","\tgetchar();","}"],"id":2},{"start":{"row":0,"column":0},"end":{"row":1239,"column":1},"action":"insert","lines":["//#include \"stdafx.h\"","#include \"users.h\"","#include <string>","#include <iostream>","#include <fstream>","#include <sstream>","#include <cstdlib>","#include <iomanip>","#include <cstdio>","#include <cstring>","","using namespace std;","","bool is_digit(string s) {","","    for (size_t n = 0; n < s.length(); n++) {","        if (!isdigit(s[n])) {","            return false;","            break;","        }","    }","    return true;","}","","string to_Str(double a) {","","\tstringstream ss;","","\tss << a;","","\treturn ss.str();","}","","","User::User(string username, string realname, string password, int id) :","\t\tusername(username), realname(realname), password(password), id(id) {","}","User::User(string username, string password) :","\t\tusername(username), realname(\"\"), password(password), id(0){}","","void User::showOperations(string level){","\tcout << \"Choose:\" << endl <<","\t\"The ID of the node you wish to enter\" << endl <<","\t\"H(Home),  to return to the main menu\" << endl <<","\t\"T(Toggle), to change Prices\" << endl <<","\t\"X(Exit), exiting from system \"<< endl;","}","","","void User::getOperation(User *user, string operation, string& level, string price){}","void User::makeOperation(Player *player, string operation, string& level){}","void User::makeOperation(Guest *guest, string operation, string& level){}","void User::makeOperation(Booker *booker, string operation, string& level, string price){}","void User::makeOperation(Director *director, string operation, string& level){}","","int User::recogniseUser(User *){return 0;}","bool User::recogniseDirector(User *){return true;}","int User::identity_of_user(Guest *){return 0;}","int User::identity_of_user(Player *){return 0;}","int User::identity_of_user(Booker *){return 0;}","int User::identity_of_user(Director *){return 0;}","bool User::identity_of_director(Guest *){return true;}","bool User::identity_of_director(Player *){return true;}","bool User::identity_of_director(Booker *){return true;}","bool User::identity_of_director(Director *){return true;}","","string User::getUsername(){ return username;}","","string User::getRealname(){ return realname;}","","string User::getPassword(){ return password;}","","void User::setUsername(string newusername){ username = newusername; }","","void User::setPassword(string newpassword){ password = newpassword; }","","int User::getId(){ return id; }","","User::~User(){}","","Guest::Guest(string username, string password) : User(username, password){","}","","void Guest::getOperation(User *user, string operation, string& level, string price){","\tuser->makeOperation(this, operation, level);","}","","void Guest::makeOperation(Guest *guest, string operation, string& level){","}","","bool Guest::recogniseDirector(User * user){ return user->identity_of_director(this); }","","bool Guest::identity_of_director(Guest *){ return false; }","","int Guest::recogniseUser(User * user){ return user->identity_of_user(this); }","","int Guest::identity_of_user(Guest *guest){ return 0;}","","","Wallet::Wallet(float remain) : remain(remain){","","}","","Wallet::Wallet(float remain, string allfreebets) : remain(remain){","\tstring cell1, cell2;","\tistringstream bets(allfreebets);","\tint number_of_freebets = 0;","\tgetline(bets, cell1, ',');","\twhile(cell1 != cell2){","        number_of_freebets++;","        cell2 = cell1;\t\t\t\t//count number of freebets","        getline(bets, cell1, ',');","\t}","\t","\tistringstream bets2(allfreebets);","\tfor (int i = 0; i < number_of_freebets; i++)","\t{","\t\tgetline(bets2, cell1, ',');","\t\tfreebets.push_back(atof(cell1.c_str()));","\t\t//cout << freebets[i] << endl;","\t}","}","","float Wallet::getRemain(){ return remain;}","","vector<float> Wallet::getFreebets(){","\tvector<float> copy;","\tfor (vector<float>::iterator it = freebets.begin() ; it != freebets.end(); ++it){","\t\tcopy.push_back(*it);","\t}","\treturn copy;","}","","void Wallet::increament(float freshmoney){","\tremain += freshmoney;","}","","int Wallet::getSize(){ return freebets.size(); }","","void Wallet::showfreebets(){","\tchar index = 'a';","\tfor (vector<float>::iterator i = freebets.begin(); i != freebets.end(); ++i){","\t\tcout << index << \".  \" << *i << endl;","\t\tindex++;","\t}","}","","void Wallet::decreament(float bet){","\tremain -= bet;","}","","void Wallet::eraseFreebet(int position){","\tfreebets[position] = 0;","}","","float Wallet::getFreebet(int position){ return freebets[position]; }","","Wallet::~Wallet(){}","","Guest::~Guest() {","\t// TODO Auto-generated destructor stub","}","","void Guest::showOperations(string level){","\tthis->User::showOperations(level);","}","","Player::Player(string status, string username, string realname, string password, int id, float remain, string freebets) : User(username, realname, password, id), wallet(remain, freebets), status(status){","}","","Player::Player(string status, string username, string realname, string password, int id, float remain) : User(username, realname, password, id), wallet(remain), status(status){","}","","void Player::showOperations(string level){","\tthis->User::showOperations(level);","\tistringstream tmp(level);","    string temp1;","    int counter = 0;","","    while (getline(tmp, temp1, '.'))            //example of s: .1.1.2","        counter++;","\tcout << \"A(Account), to manage your account\" << endl;","\tif(counter == 5)","\t\tcout << \"P(Place), to place a bet\" << endl;","}","","void Player::getOperation(User *user, string operation, string& level, string price){","\tuser->makeOperation(this, operation, level);","}","","void Player::makeOperation(Player *player, string operation, string& level){","\tif(operation == \"A\" || operation == \"Account\"){","\t\tthis->enterAccount();","\t}","\telse if(operation == \"P\" || operation == \"Place\"){","\t\tthis->placeBet(level);","\t\tfstream usersdatabase(\"users.csv\");","\t\tofstream newdatabase(\"new.csv\");","\t\tstring line, cell;","\t\tgetline(usersdatabase, line);","\t\tnewdatabase << line << endl;","\t\twhile(true){","\t\t\tgetline(usersdatabase, line);","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell, '|');","\t\t\tif(this->getId() == atoi(cell.c_str())){","\t\t\t\tnewdatabase << this->getId() << '|' << this->getUsername() << '|' << this->getRealname() << '|' <<","\t\t\t\tthis->getPassword() << '|' << 1 << '|' << status << '|' << wallet.getRemain();","\t\t\t\tif(wallet.getSize() > 0){","\t\t\t\t\tvector<float> copy = wallet.getFreebets();","\t\t\t\t\tnewdatabase << '|';","\t\t\t\t\tfor (int i = 0; i < copy.size(); ++i){","\t\t\t\t\t\tif(i == copy.size() - 1)","\t\t\t\t\t\t\tnewdatabase << copy[i] << endl;","\t\t\t\t\t\telse","\t\t\t\t\t\t\tnewdatabase << copy[i] << ',';","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\t\t","\t\t\t\telse","\t\t\t\t\tnewdatabase << endl;","\t\t\t}","\t\t\telse","\t\t\t\tnewdatabase << line << endl;","\t\t\tif(usersdatabase.eof()) break;","\t\t}","\t\tusersdatabase.close();","\t\tnewdatabase.close();","\t\tremove(\"users.csv\");","\t\trename(\"new.csv\", \"users.csv\");","\t}","}","","int Player::recogniseUser(User *user){return user->identity_of_user(this); }","","bool Player::recogniseDirector(User * user){ return user->identity_of_director(this); }","","bool Player::identity_of_director(Player *){ return false; }","","int Player::identity_of_user(Player *player){ return 1; }","","Wallet& Player::getWallet(){","\treturn wallet;","}","","void Player::enterAccount(){","\tif (system(\"CLS\")) system(\"clear\");","\tcout << \"Player: \" << this->getRealname() << \" and username: \" << this->getUsername() << endl;","\tWallet w = this->getWallet();","\tcout << \"Available remain: \" << w.getRemain() << endl;","\tcout << \"Coupons' List: \";","\tvector<float> myvector = w.getFreebets();","\tfor (vector<float>::iterator it = myvector.begin() ; it != myvector.end(); ++it)","\t\tcout << *it << \" \";","\tcout << endl << endl;","\t","\tstring operation;","\tbool flag = true;","\twhile(flag == true){","\t\tcout << \"Choices: \" << endl <<","\t\t\"R(Rename), to change name\" << endl <<","\t\t\"P(Password), to change your password\" << endl <<","\t\t\"B(Bets), to show history of bets\" << endl <<","\t\t\"D(Deposit), to refill your account and increase the remain\" << endl;","\t\tgetline(cin, operation);","\t\tif(operation == \"R\" || operation == \"Rename\"){","\t\t\tflag = false;","\t\t\tthis->renamePlayer();","\t\t}","\t\telse if(operation == \"P\" || operation == \"Password\"){","\t\t\tflag = false;","\t\t\tthis->changePassword();","\t\t}","\t\telse if(operation == \"B\" || operation == \"Bets\"){","\t\t\tthis->betsHistory();","\t\t\tflag = false;","\t\t}","\t\telse if(operation == \"D\" || operation == \"Deposit\"){","\t\t\tthis->refillAccount();","\t\t\tflag = false;","\t\t}","\t\telse","\t\t\tcout << \"Wrong code of operation, Please try again\" << endl;","\t}","\tfstream usersdatabase(\"users.csv\");","\tofstream newdatabase(\"new.csv\");","\tstring line, cell;","\tgetline(usersdatabase, line);","\tnewdatabase << line << endl;","\twhile(true){","\t\tgetline(usersdatabase, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tif(this->getId() == atoi(cell.c_str())){","\t\t\tnewdatabase << this->getId() << '|' << this->getUsername() << '|' << this->getRealname() << '|' <<","\t\t\tthis->getPassword() << '|' << 1 << '|' << status << '|' << wallet.getRemain();","\t\t\tif(wallet.getSize() > 0){","\t\t\t\tvector<float> copy = wallet.getFreebets();","\t\t\t\tnewdatabase << '|';","\t\t\t\tfor (int i = 0; i < copy.size(); ++i){","\t\t\t\t\tif(i == copy.size() - 1)","\t\t\t\t\t\tnewdatabase << copy[i] << endl;","\t\t\t\t\telse","\t\t\t\t\t\tnewdatabase << copy[i] << ',';","\t\t\t\t}","\t\t\t}","\t\t\t\t","\t\t\telse","\t\t\t\tnewdatabase << endl;","\t\t}","\t\telse","\t\t\tnewdatabase << line << endl;","\t\tif(usersdatabase.eof()) break;","\t}","\tusersdatabase.close();","\tnewdatabase.close();","\tremove(\"users.csv\");","\trename(\"new.csv\", \"users.csv\");","}","","void Player::renamePlayer(){","\tbool  flag = true, found = true;","\tstring name, line, cell;","\tifstream database(\"users.csv\");","\tofstream newdatabase(\"new.csv\");","\tgetline(database, line);","\twhile(flag == true){","\t\tfound = true;","\t\tcout << \"Please Give the new Name\" << endl;","\t\tcin >> name;","\t\tif(name == \"guest\"){","\t\t\tcout << \"Not valid name please try again\" << endl;","\t\t\tfound = false;","\t    }","\t\twhile(true){","\t\t\tgetline(database, line);","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell, '|');","\t        getline(is, cell, '|');","\t        if(name == cell){","\t        \tcout << \"The name you entered already exists. Please try again\" << endl;","\t        \tfound = false;","\t        }","\t        if ( database.eof())","\t        \tbreak;","\t        ","\t\t}","\t\tif(found == true)","\t\t\tflag = false;\t","\t\t","\t}","\tint size = wallet.getSize();","\tif(found == true){\t\t//the name is valid make the change at the users.csv","\t\tifstream database(\"users.csv\");","\t\tgetline(database, line);","\t\tnewdatabase << line << endl;","\t\twhile(true){","\t\t\tgetline(database, line);","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell, '|');","\t\t\tif(this->getId() == atoi(cell.c_str())){","\t\t\t\tnewdatabase << cell << '|' << name << '|';","\t\t\t\tgetline(is, cell, '|');","\t\t\t\tfor (int i = 0; i < 4; ++i){","\t\t\t\t\tgetline(is, cell, '|');","\t\t\t\t\tnewdatabase << cell << '|';","\t\t\t\t}","\t\t\t\tgetline(is, cell, '|');","\t\t\t\tnewdatabase << cell;","\t\t\t\tif(size != 0){","\t\t\t\t\tnewdatabase << '|';","\t\t\t\t\tgetline(is, cell, '|');","\t\t\t\t\tnewdatabase << cell;","\t\t\t\t}","\t\t\t\t","\t\t\t\t","\t\t\t\tnewdatabase << endl;","\t\t\t}","\t\t\telse","\t\t\t\tnewdatabase << line << endl;","\t\t\tif ( database.eof() ) break;","\t\t}","\t}","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Rename \" << \"changed to \" << name << endl;","","","\tdatabase.close();","\tnewdatabase.close();","\tremove(\"users.csv\");","\trename(\"new.csv\", \"users.csv\");","\tthis->setUsername(name);","","\t ","}","","void Player::changePassword(){","\tstring password1, password2, cell, line;","\tint id;","\tifstream database(\"users.csv\");","\tofstream newdatabase(\"new.csv\");","\tdo{","\t\tcout << \"Please enter the new password\" << endl;","\tcin >> password1;","\tcout << \"Please re-enter the password\" << endl;","\tcin >> password2;","\tif(password1 != password2)","\t\tcout << \"The 2 password you entered don't match, please try again\" << endl;","\t}while(password1 != password2);","\tid = this->getId();","\tgetline(database, line);","\tnewdatabase << line << endl;","\tint size = wallet.getSize();","\twhile(true){","\t\tgetline(database, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tif(id == atoi(cell.c_str())){","\t\t\t\tnewdatabase << cell << '|';","\t\t\t\tfor (int i = 0; i < 2; ++i){","\t\t\t\t\tgetline(is, cell, '|');","\t\t\t\t\tnewdatabase << cell << '|';","\t\t\t\t}","\t\t\t\tnewdatabase << password1 << '|';","\t\t\t\tgetline(is, cell, '|');","\t\t\t\tfor (int i = 0; i < 3; ++i){","\t\t\t\t\tgetline(is, cell, '|');","\t\t\t\t\tif(i == 2)","\t\t\t\t\t\tnewdatabase << cell;","\t\t\t\t\telse","\t\t\t\t\t\tnewdatabase << cell << '|';","\t\t\t\t}","\t\t\t\tif(size != 0){","\t\t\t\t\tgetline(is, cell, '|');","\t\t\t\t\tnewdatabase << '|' << cell;","\t\t\t\t}","\t\t\t\t","\t\t\t\t","\t\t\t\tnewdatabase << endl;","","\t\t}","\t\telse","\t\t\tnewdatabase << line << endl;","\t\tif ( database.eof() ) break;","\t}","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Password \" << \"changed to \" << password1 << endl;","\tdatabase.close();","\tnewdatabase.close();","\tremove(\"users.csv\");","\trename(\"new.csv\", \"users.csv\");","\tthis->setPassword(password1);","}","","void Player::betsHistory(){","\tstring cell, line;","\tifstream database(\"bets.csv\");","\tgetline(database, line);","\twhile(true){","\t\tgetline(database, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tgetline(is, cell, '|');","\t\tif(this->getId() == atoi(cell.c_str())){","\t\t\tistringstream newline(line);","\t\t\tstring bet;","\t\t\tfor(int j = 0; j < 5; j++){","\t\t    \tgetline(newline, bet, '|');","\t\t    \tcout << setw (10) << bet << \" | \";","\t\t    }","\t\t    cout << endl;","\t\t}","","\t\tif ( database.eof() ) break;","\t}","\tstring pause;","\tgetline(cin, pause);","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Bets \" << \"Player viewed his bets\" << endl;","}","","void Player::refillAccount(){","\tstring money;","\tcout << \"Please enter the amount of money you wish to store to your account\" << endl;","\tgetline(cin, money);","\twallet.increament(atof(money.c_str()));","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Deposit \" << \"Player refilled his wallet with \" << money << endl;","}","","void Player::placeBet(string currentlevel){\t\t\t\t//prepei edw na grafeis meta sto istoriko kai sto bets.csv","\tstring eventchoice, bet, line, cell;","\tifstream database(\"bets.csv\");","\twhile(true){","\t\tgetline(database, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tif ( database.eof() ) break;","\t}","\t","\t","\tbool type_of_bet; //true for money false for freebet;","\tbool succes_bet = false;","\tchar index;","\tcout << \"Available remain in account: \" << wallet.getRemain() << endl;","\tif(eventchoice == \"cancel\")","\t\treturn;","\telse{","\t\twhile(succes_bet == false){","\t\t\tif(wallet.getSize() != 0){","\t\t\t\twallet.showfreebets();","\t\t\t\tcout << \"Please give the amount of money you want to bet or the number of freebet\" << endl;","\t\t\t}","\t\t\telse{","\t\t\t\tcout << \"No available freebets\" << endl;","\t\t\t\tcout << \"Please give the amount of money you want to bet\" << endl;","\t\t\t}","\t\t\tcin >> bet;","\t\t\ttype_of_bet = is_digit(bet);","\t\t\tif(type_of_bet == true){","\t\t\t\tif(wallet.getRemain() == 0){","\t\t\t\t\tcout << \"No money in the wallet, please enter your account to refill\" << endl;","\t\t\t\t\treturn;","\t\t\t\t}","\t\t\t\telse if(atof(bet.c_str()) > wallet.getRemain()){","\t\t\t\t\tcout << \"Sorry, not enough money in the wallet, please try again\" << endl;","\t\t\t\t\treturn;","\t\t\t\t}","","\t\t\t\telse{","\t\t\t\t\twallet.decreament(atoi(bet.c_str()));","\t\t\t\t\tsucces_bet = true;","\t\t\t\t}","\t\t\t}","\t\t\telse{","\t\t\t\tcout << \"Please enter the letter of the freebet you want to use\" << endl;","\t\t\t\tcin >> index;","\t\t\t\twallet.eraseFreebet(index- 'a');","\t\t\t\tsucces_bet = true;","\t\t\t}","\t\t}","\t}","\tcurrentlevel +=  eventchoice;","\tcurrentlevel.erase(currentlevel.begin(), currentlevel.begin()+1);","\tofstream out;","\tout.open(\"bets.csv\", ios::app); //append mode","\tout << endl << atoi(cell.c_str() + 1) << '|' << this->getId() << '|' << currentlevel << '|';","\tif(type_of_bet == true)","\t\tout << bet << \"|-\";","\telse","\t\tout << wallet.getFreebet(index - 'a') << \"|-\";","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Place \";","\tif(type_of_bet)","\t\tlogfile << \"Player placed the amount of money \" << bet << endl;","\telse","\t\tlogfile << \"Player placed a freebet\" << endl;","","}","","Player::~Player() {","}","","Booker::Booker(string username, string realname, string password, int id) : User(username, realname, password, id){","}","","void Booker::showOperations(string level){","\tthis->User::showOperations(level);","\tcout << \"B(Bets) to show the last 20 bets\" << endl <<","\t\"F(Freebets), to give a freebet to a player\" << endl;","\tistringstream tmp(level);","    string temp1;","    int counter = 0;","","    while (getline(tmp, temp1, '.'))            //example of s: .1.1.2","        counter++;","    if(counter == 5)","\t\tcout << \"V(Void), to cancel a choice\" << endl <<","\t\t\"S(Settle), to define a choice winning or losing\" << endl;","","}","","void Booker::getOperation(User *user, string operation, string& level, string price){","\tuser->makeOperation(this, operation, level, price);","}","","void Booker::makeOperation(Booker *booker, string operation, string& level, string price){","\tif(operation == \"B\" || operation == \"Bets\")","\t\tthis->showBets();","\telse if(operation == \"F\" || operation == \"Freebets\"){","\t\tthis->giveFreebet();","\t}","\telse if(operation == \"V\" || operation == \"Void\"){","\t\tthis->cancelBet(level);","\t}","\telse if(operation == \"S\" || operation == \"Settle\"){","\t\tthis->settleBet(level, price);","\t}","}","","int Booker::recogniseUser(User *user){return user->identity_of_user(this); }","","bool Booker::recogniseDirector(User * user){ return user->identity_of_director(this); }","","bool Booker::identity_of_director(Booker *){ return false; }","","int Booker::identity_of_user(Booker *player){ return 2; }","","void Booker::showBets(){","\tif (system(\"CLS\")) system(\"clear\");","\tifstream database(\"bets.csv\");","\tstring line;","    string cell;","    int i = 0;","    while(true || i<20){","    \tgetline(database, line);","    \tistringstream is(line);","    \tfor(int j = 0; j < 5; j++){","\t    \tgetline(is, cell, '|');","\t    \tcout << setw (10) << cell << \" | \";","\t    }","    \tcout << endl;","    \tif ( database.eof() ) break;","    }","    getchar();","    getchar();","","    ofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Bets \" << \"Booker viewed the list of bets\" << endl;","}","","void Booker::giveFreebet(){","\tif (system(\"CLS\")) system(\"clear\");","\tstring username, freebet;","\tbool found = false;","\tifstream database(\"users.csv\");","\tofstream newdatabase(\"new.csv\");","\twhile(found == false){","\t\tcout << \"Please Give the name of the player you wish to give a freebet\" << endl;","\t\tcin >> username;","\t\t","\t\tstring line, cell, cell2;","\t\tgetline(database, line);","\t\tnewdatabase << line << endl;","\t\twhile(true){","\t\t\tgetline(database, line);","\t\t\tnewdatabase << line;","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell, '|');","\t        getline(is, cell, '|');","\t        if(username == cell){","\t        \tfound = true;","\t        \tcout << \"Please Give the amount of money you wish place:\" << endl;","\t        \tcin >> freebet;","\t        \tistringstream is2(line);","\t        \tfor (int i = 0; i < 6; ++i){","\t        \t\tgetline(is, cell, '|');","\t        \t\tgetline(is2, cell2, '|');","\t        \t}","\t        \tgetline(is2, cell2, '|');","\t        \tif(cell2 != cell)","\t        \t\tnewdatabase << ',' << freebet << endl;","\t        \telse ","\t        \t\tnewdatabase << '|' << freebet << endl;","\t        }","\t        else","\t        \tnewdatabase << endl;","\t        if ( database.eof() ) break;","\t\t}","\t}","\tdatabase.close();","\tnewdatabase.close();","\tremove(\"users.csv\");","\trename(\"new.csv\", \"users.csv\");","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Freebets \" << \"Booker gave a freebet to \" << username << \" with amount \" << freebet << endl;","","}","","void Booker::cancelBet(string& level){","\tifstream database(\"bets.csv\");","\tifstream database3(\"bets.csv\");","\tofstream newdatabase(\"new.csv\");","\tofstream newdatabase2(\"new2.csv\");","\tfstream database2(\"users.csv\");","\tfstream betsdatabase(\"bets.csv\");","\tstring line, selection, cell, user_id, lvl, money;","\tstring line2, cell2, cell3;","\tbool flag = true;","\tcout << \"Which selection do you wish to cancel ?\" << endl;","\tcin >> selection;","\tlevel  += selection + \".\";","\tlvl = level;","\tlvl.erase(lvl.begin(), lvl.begin() + 1);","\tlvl.erase(lvl.end() - 1, lvl.end());","\tbool bet_found = false;","\twhile(!bet_found){","\t\tgetline(database3, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tgetline(is, cell, '|');","\t\tgetline(is, cell, '|');","\t\tif(lvl == cell){","\t\t\tbet_found = true;","\t\t}","\t\tif ( database3.eof() ) break;","\t}","\tif (bet_found){","\t\tgetline(betsdatabase, line);","\t\tnewdatabase2 << line << endl;","\t\twhile(true){","\t\t\tgetline(betsdatabase, line);","\t\t\tistringstream is3(line);","\t\t\tfor (int i = 0; i < 3; ++i)","\t\t\t\tgetline(is3, cell2, '|');","\t\t\tif(lvl == cell2){","\t\t\t\tistringstream is3(line);","\t\t\t\tfor (int i = 0; i < 4; ++i){","\t\t\t\t\tgetline(is3, cell2, '|');","\t\t\t\t\tnewdatabase2 << cell2 << '|';","\t\t\t\t}","\t\t\t\tnewdatabase2 << \"V\" << endl;","\t\t\t}","\t\t\telse","\t\t\t\tnewdatabase2 << line << endl;","\t\t\tif ( betsdatabase.eof() ) break;","\t\t}","\t\t","\t\tgetline(database, line);","\t\twhile(true){","\t\t\tgetline(database, line);","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell, '|');","\t\t\tgetline(is, cell, '|');","\t\t\tuser_id = cell;","\t\t\tgetline(is, cell, '|');","\t\t\tif(cell == lvl){","\t\t\t\tgetline(is, cell, '|');","\t\t\t\tmoney = cell;","\t\t\t\tgetline(database2, line2);","\t\t\t\tnewdatabase << line2 << endl;","\t\t\t\twhile(true){","\t\t\t\t\tgetline(database2, line2);","\t\t\t\t\tistringstream is2(line2);","\t\t\t\t\tgetline(is2, cell2, '|');","\t\t\t\t\tif(cell2 == user_id){","\t\t\t\t\t\tnewdatabase << user_id << '|';","\t\t\t\t\t\tfor(int i =0; i < 5; i++){","\t\t\t\t\t\t\tgetline(is2, cell2, '|');","\t\t\t\t\t\t\tnewdatabase << cell2 << '|';","\t\t\t\t\t\t}","\t\t\t\t\t\tgetline(is2, cell2, '|');","\t\t\t\t\t\tnewdatabase << atof(money.c_str()) + atof(cell2.c_str());","\t\t\t\t\t\tgetline(is2, cell3, '|') ;","\t\t\t\t\t\t","\t\t\t\t\t\tif(cell3 ==  \"\")","\t\t\t\t\t\t\tnewdatabase << endl; ","\t\t\t\t\t\telse","\t\t\t\t\t\t\tnewdatabase << '|' << cell3 << endl;","\t\t\t\t\t}","\t\t\t\t\telse","\t\t\t\t\t\tnewdatabase << line2 << endl;","\t\t\t\t\tif ( database2.eof() ) break;","\t\t\t\t}","\t\t\t}","\t\t\tif ( database.eof() ) break;","\t\t}","\t\tdatabase.close();","\t\tdatabase2.close();","\t\tdatabase3.close();","\t\tnewdatabase.close();","\t\tremove(\"users.csv\");","\t\trename(\"new.csv\", \"users.csv\");","\t\tbetsdatabase.close();","\t\tnewdatabase2.close();","\t\tremove(\"bets.csv\");","\t\trename(\"new2.csv\", \"bets.csv\");","\t}","","\t","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Void \" << \"Booker canceled the node \" << lvl << endl;","}","","void Booker::settleBet(string& level, string price){","\tfloat total_money=0;","\tstring sublevel, money;","\tstring lvl = level;","\tlvl.erase(lvl.begin(), lvl.begin() + 1);","\tlvl.erase(lvl.end() - 1, lvl.end());","\t//cout << \"level \" << lvl << \"price \" << price<< endl;","\tifstream database(\"bets.csv\");","\tofstream newdatabase(\"new.csv\");","\tstring cell, line, line2, cell2, cell3;","\tgetline(database, line);","\tbool bet_found = false;","\twhile(!bet_found){","\t\tgetline(database, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tgetline(is, cell, '|');","\t\tgetline(is, cell, '|');","\t\tif(lvl == cell){","\t\t\tbet_found = true;","\t\t}","\t\tif(bet_found == true){","\t\t\tsublevel = lvl;","\t\t\tsublevel.erase(sublevel.end() - 2, sublevel.end());","\t\t\tifstream database2(\"bets.csv\");","\t\t\tgetline(database2, line2);","\t\t\tnewdatabase << line2 << endl;","\t\t\twhile(true){","\t\t\t\tgetline(database2, line2);","\t\t\t\tistringstream is2(line2);","\t\t\t\tfor (int i = 0; i < 3; ++i)","\t\t\t\t\tgetline(is2, cell2, '|');","\t\t\t\tstring test_sublevel = cell2;","\t\t\t\tif(cell2 != \"\")","\t\t\t\t\ttest_sublevel.erase(test_sublevel.end() - 2, test_sublevel.end());","\t\t\t\tif(lvl == cell2){","\t\t\t\t\tistringstream is3(line2);","\t\t\t\t\tfor (int i = 0; i < 4; ++i){","\t\t\t\t\t\tgetline(is3, cell2, '|');","\t\t\t\t\t\tnewdatabase << cell2 << '|';","\t\t\t\t\t}","\t\t\t\t\tnewdatabase << \"W\" << endl;","\t\t\t\t}","\t\t\t\t","\t\t\t\telse if(test_sublevel == sublevel){","\t\t\t\t\tistringstream is3(line2);","\t\t\t\t\tfor (int i = 0; i < 4; ++i){","\t\t\t\t\t\tgetline(is3, cell2, '|');","\t\t\t\t\t\tnewdatabase << cell2 << '|';","\t\t\t\t\t}","\t\t\t\t\tgetline(is3, cell2, '|');","\t\t\t\t\tif(cell2 != \"V\")","\t\t\t\t\t\tnewdatabase << \"L\" << endl;","\t\t\t\t\telse","\t\t\t\t\t\tnewdatabase << cell2 << endl;","\t\t\t\t}","\t\t\t\telse","\t\t\t\t\tnewdatabase << line2 << endl;","\t\t\t\t","","\t\t\t\tif ( database2.eof() ) break;","\t\t\t}","\t\t}","\t\t","\t\tif ( database.eof() ) break;","\t}","\tif(bet_found){","\t\tdatabase.close();","\t\tnewdatabase.close();","\t\tremove(\"bets.csv\");","\t\trename(\"new.csv\", \"bets.csv\");","\t\tstring user_id, winner_id;","\t\tifstream usersdatabase(\"users.csv\");","\t\tifstream checkbets(\"bets.csv\");","\t\tofstream newdatabase2(\"new2.csv\");","\t\tgetline(usersdatabase, line2);","\t\tnewdatabase2 << line2 << endl;","\t\tgetline(checkbets, line);","\t\tbool flag = true;","\t\twhile(true){","\t\t\tgetline(checkbets, line);","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell, '|');","\t\t\tgetline(is, cell, '|');","\t\t\tuser_id = cell;","\t\t\tgetline(is, cell, '|');","\t\t\tif(lvl == cell){","\t\t\t\twinner_id = user_id;","\t\t\t\tgetline(is, cell, '|');","\t\t\t\tmoney = cell;","\t\t\t\ttotal_money += atof(money.c_str());","\t\t\t\tflag = true;","\t\t\t\twhile(flag){","\t\t\t\t\tgetline(usersdatabase, line2);","\t\t\t\t\tistringstream users(line2);","\t\t\t\t\tgetline(users, cell2, '|');","\t\t\t\t\tuser_id = cell2;","\t\t\t\t\tif(winner_id == cell2){","\t\t\t\t\t\tnewdatabase2 << cell2 << '|';","\t\t\t\t\t\tfor (int i = 0; i < 5; ++i){","\t\t\t\t\t\t \tgetline(users, cell2, '|');","\t\t\t\t\t\t \tnewdatabase2 << cell2 << '|';","\t\t\t\t\t\t}","\t\t\t\t\t\tgetline(users, cell2, '|');","\t\t\t\t\t\tnewdatabase2 << atof(cell2.c_str()) + atof(money.c_str()) *0.95;","\t\t\t\t\t\tgetline(users, cell3, '|');","\t\t\t\t\t\tif(cell3 == \"\")","\t\t\t\t\t\t\tnewdatabase2 << endl;","\t\t\t\t\t\telse{","\t\t\t\t\t\t\tnewdatabase2 << '|' << cell3 << endl;","\t\t\t\t\t\t}","\t\t\t\t\t\tflag = false;","\t\t\t\t\t}","\t\t\t\t\telse","\t\t\t\t\t\tnewdatabase2 << line2 << endl;","\t\t\t\t\tif ( usersdatabase.eof()) break;","\t\t\t\t}","\t\t\t}","\t\t\tif ( checkbets.eof() ) break;","\t\t}","\t\tprice = to_Str(total_money);","\t\tusersdatabase.close();","\t\tcheckbets.close();","\t\tnewdatabase2.close();","\t\tremove(\"users.csv\");","\t\trename(\"new2.csv\", \"users.csv\");","\t}","\t","","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Settle \" << \"Booker settled the node:  \" << lvl << \" to winning \" << endl;","}","","Booker::~Booker() {","\t// TODO Auto-generated destructor stub","}","","Director::Director(string username, string realname, string password, int id) :  User(username, realname, password, id){","}","","void Director::showOperations(string level){","\tBooker b(\"\", \"\", \"\", 0);","\tb.showOperations(level);","\tcout << \"S(Save) to save current state and sync the data files\" << endl << endl <<","\t\"Management:\" << endl <<","\t\"L(Logs), to show the last 25 actions on the system\" << endl<<","\t\"U(Users), to manage the users\" << endl <<","\t\"V(Visibility), to change visibility of a node\" << endl <<","\t\"R(Rename), to change the name of a node\" << endl <<","\t\"N(New), to create a node\" << endl <<","\t\"C(Copy), to copy a node (as non-visible)\" << endl <<","\t\"D(Delete), to delete a node\" << endl;","}","","void Director::getOperation(User *user, string operation, string& level, string price){","\tuser->makeOperation(this, operation, level);","}","","void Director::makeOperation(Director *director, string operation, string& level){","\tif(operation == \"U\" || operation == \"Users\")","\t\tthis->manageUsers();","\telse if (operation == \"L\" || operation == \"Logs\")","\t\tshowLog();","\telse if (operation == \"B\" || operation == \"Bets\"){","\t\tthis->showBets();","\t}","\telse if (operation == \"F\" || operation == \"Freebets\"){","\t\tthis->giveFreebet();","\t}","}","","void Director::manageUsers() {","\tif (system(\"CLS\")) system(\"clear\");","\tstring choice;","\tcout << \"Choices:\" << endl << endl << \"V(View), to show the users\" << endl <<","\t\t\"S(Search), to search a user\" << endl <<","\t\t\"L(Lock), to change the status of a user\\n\" << endl;","\tcin >> choice;","\tif (choice == \"V\" || choice == \"View\")","\t\tthis->showUsers();","\telse if (choice == \"L\" || choice == \"Lock\")","\t\tthis->lockUser();","\telse if (choice == \"S\" || choice == \"Search\")","\t\tthis->searchUser();","}","","void Director::showUsers(){","","\tif (system(\"CLS\")) system(\"clear\");","\tifstream database(\"users.csv\");","\tstring line, cell;","\twhile (getline(database, line)) {","","\t\tcout << \"\\n| \" << line;","\t}","\tcout << endl;","\tstring pause;","\tgetchar();","\tgetchar();","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << \"Director \" << this->getUsername() << \" Viewed the users of the system\" << endl;","}","","void Director::lockUser() {","\tstring username, status;","\tint type;","\tif (system(\"CLS\")) system(\"clear\");","\tcout << \"Lock - Unlock User\" << endl;","","\tcout << \"Give the username : \";","\tcin >> username;","","\tif (system(\"CLS\")) system(\"clear\");","\ttype = searchUser(username);","\tif (type == 1) {\t//if it's a player","\t\t","\t\tstring status, comment;","","\t\tcout << \"Give the status : \";","\t\tcin >> status;","\t\tcout << \"\\nGive a comment : \";","\t\tgetchar();","\t\tgetline(cin, comment);","","\t\tstatus += \" \" + comment;","","\t\tifstream database(\"users.csv\");","\t\tofstream newdatabase(\"new.csv\");","","\t\tstring line, cell, cell2;","\t\tgetline(database, line);","\t\tnewdatabase << line << endl;","\t\twhile (true) {","","\t\t\tgetline(database, line);","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell2, '|');","\t\t\tgetline(is, cell, '|');","","\t\t\tif (username == cell) {","","\t\t\t\tnewdatabase << cell2 << '|';","\t\t\t\tnewdatabase << cell << '|';","","\t\t\t\tfor (int i = 0; i < 3; ++i) {","\t\t\t\t\tgetline(is, cell, '|');","\t\t\t\t\tnewdatabase << cell << '|';","\t\t\t\t}","","\t\t\t\tnewdatabase << status << '|';","\t\t\t\tgetline(is, cell, '|');","","\t\t\t\tgetline(is, cell, '\\n');","\t\t\t\tnewdatabase << cell;","","\t\t\t\tnewdatabase << endl;","\t\t\t}","\t\t\telse","\t\t\t\tnewdatabase << line << endl;","\t\t\tif (database.eof()) break;","\t\t}","\t\tdatabase.close();","\t\tnewdatabase.close();","\t\tremove(\"users.csv\");","\t\trename(\"new.csv\", \"users.csv\");","","\t\tcout << \"Done !\";","\t}","\telse if (type != 0)","\t\tcout << \"Not a Player !\" << endl;","\t","\tstring pause;","\tgetline(cin, pause);","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << \"Director \" << this->getUsername() << \" changed the status of \"<< username << \" to \" << status << endl;","}","","int Director::searchUser(string user) {","\tstring username;","\tint type = 0;","\tif (user == \"\") {","\t\tif (system(\"CLS\")) system(\"clear\");","\t\tcout << \"Search User\" << endl;","","\t\tcout << \"Give the username : \";\t\t","\t\tcin >> username;","\t}","\telse {","\t\tusername = user;","\t}","","\tif (system(\"CLS\")) system(\"clear\");","\tifstream database(\"users.csv\");","\tbool found = false;","\tstring line;","\tstring cell;","\tgetline(database, line);","\twhile (true) {","\t\tgetline(database, line);","\t\tistringstream is(line);","\t\tgetline(is, cell, '|');","\t\tgetline(is, cell, '|');","","\t\tfor (int i = 0; i <= cell.size(); i++) {","\t\t\tif (!username.compare(cell.substr(i, username.size()))){","\t\t\t\tcout << line << endl;","\t\t\t\tfound = true;","\t\t\t\tgetline(is, cell, '|');","\t\t\t\tgetline(is, cell, '|');","\t\t\t\tgetline(is, cell, '|');","\t\t\t\ttype = atoi((cell.c_str()));","\t\t\t}","\t\t}","\t\tif (database.eof()) break;","\t}","","\tif (!found)","\t\tcout << \"Nothing Found !\" << endl;","","\tstring pause;","\tgetchar();","\tgetchar();","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << \"Director \" << this->getUsername() << \" searched the name \" << username << endl;","","\treturn type;","}","","int Director::recogniseUser(User *user) {return user->identity_of_user(this); }","","bool Director::recogniseDirector(User *user){ return user->identity_of_director(this); }","","bool Director::identity_of_director(Director *){ return true; }","","int Director::identity_of_user(Director *player){ return 3; }","","Director::~Director() {","\t// TODO Auto-generated destructor stub","}","","void Director::showLog() {","\tif (system(\"CLS\")) system(\"clear\");","\tifstream logs(\"audit.log\");","","\tstring line;","\tint i=0;","\twhile (i<25 && (!logs.eof())){","\t\tgetline(logs, line);","\t\tcout << line << endl;","\t\ti++;","\t}","\tgetchar();","\tgetchar();","}","","void Director::giveFreebet(){","\tif (system(\"CLS\")) system(\"clear\");","\tstring username, freebet;","\tbool found = false;","\tifstream database(\"users.csv\");","\tofstream newdatabase(\"new.csv\");","\twhile(found == false){","\t\tcout << \"Please Give the name of the player you wish to give a freebet\" << endl;","\t\tcin >> username;","\t\t","\t\tstring line, cell, cell2, line2;","\t\tgetline(database, line);","\t\tnewdatabase << line << endl;","\t\twhile(true){","\t\t\tgetline(database, line);","\t\t\tif(line.size() > 0){","\t\t\t\tline2 = line.substr(0, line.size() - 1);","\t\t\t\tif(line.substr(line.size() - 1, line.size()) == \"\\r\")","\t\t\t\t\tnewdatabase << line2;","\t\t\t\telse","\t\t\t\t\tnewdatabase << line;","\t\t\t}","\t\t\telse","\t\t\t\tnewdatabase << line;","\t\t\tnewdatabase.flush();","\t\t\tistringstream is(line);","\t\t\tgetline(is, cell, '|');","\t        getline(is, cell, '|');","\t        if(username == cell){","\t        \tfound = true;","\t        \tcout << \"Please Give the amount of money you wish place:\" << endl;","\t        \tcin >> freebet;","\t        \tfor (int i = 0; i < 5; ++i){","\t        \t\tgetline(is, cell, '|');","\t        \t}","\t        \tif(cell.substr(cell.size() - 1, cell.size()) == \"\\r\")","\t        \t\tnewdatabase << '|' << freebet << endl;","\t        \telse ","\t        \t\tnewdatabase << ',' << freebet << endl;","\t        }","\t        else","\t        \tnewdatabase << endl;","\t        if ( database.eof() ) break;","\t\t}","\t}","\tdatabase.close();","\tnewdatabase.close();","\tremove(\"users.csv\");","\trename(\"new.csv\", \"users.csv\");","","\tofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << this->getUsername() << \" \" << \"Freebets \" << \"Booker gave a freebet to \" << username << \" with amount \" << freebet << endl;","","}","","void Director::showBets(){","\tif (system(\"CLS\")) system(\"clear\");","\tifstream database(\"bets.csv\");","\tstring line;","    string cell;","    int i = 0;","    while(true || i<20){","    \tgetline(database, line);","    \tistringstream is(line);","    \tfor(int j = 0; j < 5; j++){","\t    \tgetline(is, cell, '|');","\t    \tcout << setw (10) << cell << \" | \";","\t    }","    \tcout << endl;","    \tif ( database.eof() ) break;","    }","    getchar();","    getchar();","","    ofstream logfile;","\tlogfile.open(\"audit.log\", ios::app);","\tlogfile << \"Director \" << this->getUsername() << \" viewed the list of bets\" << endl;","}"]}]]},"ace":{"folds":[],"scrolltop":17784.672973632812,"scrollleft":0,"selection":{"start":{"row":1239,"column":1},"end":{"row":1239,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":1,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1488747114135,"hash":"92fa9e40740dcbf5e4e08b1a4231d219cbe5777c"}